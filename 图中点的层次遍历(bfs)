#include<iostream>
#include<algorithm>
#include<queue>
#include<cstring>

using namespace std;
const int N = 1e5 + 10;

int h[N], ne[N], e[N];
int idx = 0;
int dist[N];
bool used[N];

void add(int a, int b) {
    e[idx] = b;
    ne[idx] = h[a];
    h[a] = idx++;
}

void bfs() {
    queue<int> q;
    q.push(1);
    dist[1] = 0;
    used[1] = true;
    while(q.size()) {
        int t = q.front();
        q.pop();
        for(int i = h[t]; i != -1; i = ne[i]) {
            int j = e[i];
            if(!used[j]) {
                dist[j] = dist[t] + 1;
                used[j] = true;
                q.push(j);
            }
        }
    }
}

int main() {
    memset(h, -1, sizeof(h));
    memset(dist, 0x3f, sizeof(dist));
    int n, m;
    cin >> n >> m;
    for(int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        add(a, b);
    }
    bfs();
    if(dist[n] == 0x3f3f3f3f) {
        cout << "-1" << endl;
    } else {
        cout << dist[n] << endl;
    }
    return 0;
}
