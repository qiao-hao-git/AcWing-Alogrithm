#include<iostream>
#include<cstring>
#include<algorithm>
#include<queue>

using namespace std;
const int N = 1e5 + 10;

int e[N], ne[N], w[N], h[N], idx = 0;
int dist[N];
int state[N];
int n, m;

void add(int a, int b, int c) {
    e[idx] = b;
    ne[idx] = h[a];
    w[idx] = c;
    h[a] = idx++;
}

void spfa() {
    memset(dist, 0x3f, sizeof(dist));
    dist[1] = 0;
    state[1] = 1;
    queue<int> q;
    q.push(1);
    while(q.size()) {
        int t = q.front();
        q.pop();
        state[t] = 0;
        for(int i = h[t]; i != -1; i = ne[i]) {
            int j = e[i];
            if(dist[j] > dist[t] + w[i]) {
                dist[j] = dist[t] + w[i];
                if(!state[j]) {
                    state[j] = 1;
                    q.push(j);
                }
            }
        }
    }
    if(dist[n] == 0x3f3f3f3f) {
        cout << "impossible";
    } else {
        cout << dist[n];
    }
}

int main() {
    cin >> n >> m;
    memset(h, -1, sizeof(h));
    for(int i = 0; i < m; i++) {
        int a, b, c;
        cin >> a >> b >> c;
        add(a, b, c);
    }
    spfa();
    return 0;
}
