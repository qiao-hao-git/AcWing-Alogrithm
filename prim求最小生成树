#include<iostream>
#include<algorithm>
#include<cstring>

using namespace std;
const int N = 510;
int g[N][N];
int dist[N];
int state[N];
int n, m;

void prim() {
    memset(dist, 0x3f, sizeof(dist));
    dist[1] = 0;
    int res = 0;
    for(int i = 0; i < n; i++) {
        int t = -1;
        for(int j = 1; j <= n; j++) {
            if(!state[j] && (t == -1 || dist[t] > dist[j])) {
                t = j;
            }
        }
        if(dist[t] ==  0x3f3f3f3f) {
            puts("impossible");
            return;
        }
        state[t] = 1;
        res += dist[t];
        for(int j = 1; j <= n; j++) {
            if(!state[j] && dist[j] > g[t][j]) {
                dist[j] = g[t][j];
            }
        }
    }
    cout << res;
}

int main() {
    cin >> n >> m;
    memset(g, 0x3f, sizeof(g));
    for(int i = 0; i < m; i++) {
        int x, y, w;
        cin >> x >> y >> w;
        g[x][y] = g[y][x] = min(g[x][y], w);
    }
    prim();
    return 0;
}
