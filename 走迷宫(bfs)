#include<iostream>
#include<vector>
#include<queue>
using namespace std;

int dir[4][2] = {0, 1, 0, -1, -1, 0, 1, 0};
void bfs(vector<vector<int>>& grid, vector<vector<int>>& visited, int x, int y) {
    queue<pair<int, int>> q;
    q.push({x, y});
    while(q.size()) {
        int cur_x = q.front().first;
        int cur_y = q.front().second;
        q.pop();
        for(int i = 0; i < 4; i++) {
            int nx = cur_x + dir[i][0];
            int ny = cur_y + dir[i][1];
            if(nx < 0 || nx >= grid.size() || ny < 0 || ny >= grid[0].size()) {
                continue;
            }
            if(grid[nx][ny] == 0) {
                grid[nx][ny] = 1;
                q.push({nx, ny});
                visited[nx][ny] = visited[cur_x][cur_y] + 1;
            }
        }
    }
}
int main() {
    int n, m;
    cin >> n >> m;
    vector<vector<int>> grid(n, vector<int>(m, 0));
    vector<vector<int>> visited(n, vector<int>(m, 0));
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cin >> grid[i][j];
        }
    }
    bfs(grid, visited, 0, 0);
    cout << visited[n - 1][m - 1];
    return 0;
}
