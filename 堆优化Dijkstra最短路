#include<iostream>
#include<vector>
#include<queue>
#include<cstring>

using namespace std;

const int N = 1e6 + 10;
typedef pair<int, int> PII;
int h[N], e[N], ne[N], w[N], idx = 0;
int dist[N], state[N];
int n, m;

void add(int a, int b, int c) {
    e[idx] = b;
    ne[idx] = h[a];
    w[idx] = c;
    h[a] = idx++;
}

void dijkstra() {
    dist[1] = 0;
    priority_queue<PII, vector<PII>, greater<PII>> heap;
    heap.push({0, 1});
    while(heap.size()) {
        int t = heap.top().second, distance = heap.top().first;
        heap.pop();
        if(state[t]) {
            continue;
        }
        state[t] = 1;
        for(int i = h[t]; i != -1; i = ne[i]) {
            int j = e[i];
            if(dist[j] > dist[t] + w[i]) {
                dist[j] = dist[t] + w[i];
                heap.push({dist[j], j});
            }
        }
    }
    if(dist[n] == 0x3f3f3f3f) {
        cout << "-1";
    } else {
        cout << dist[n];
    }
}

int main() {
    memset(h, -1, sizeof(h));
    memset(dist, 0x3f, sizeof(dist));
    cin >> n >> m;
    for(int i = 0; i < m; i++) {
        int a, b, c;
        cin >> a >> b >> c;
        add(a, b, c);
    }
    dijkstra();
    return 0;    
}
