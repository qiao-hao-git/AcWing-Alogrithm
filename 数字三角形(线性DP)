#include<iostream>
#include<vector>

using namespace std;
const int INF = 0x3f3f3f3f;
int main() {
    int n;
    cin >> n;
    vector<vector<int>> nums;
    vector<vector<int>> dp(n, vector<int>(n, -INF));
    for(int i = 1; i <= n; i++) {
        vector<int> cur;
        for(int j = 1; j <= i; j++) {
            int x;
            cin >> x;
            cur.push_back(x);
        }
        nums.push_back(cur);
    }
    dp[0][0] = nums[0][0];
    for(int i = 1; i < n; i++) {
        dp[i][0] = dp[i - 1][0] + nums[i][0];
    }
    int res = -INF;
    for(int i = 1; i < n; i++) {
        for(int j = 1; j < nums[i].size(); j++) {
            dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j]) + nums[i][j];
        }
    }
    for(int i = 0; i < n; i++) {
        res = max(res, dp[n-1][i]);
    }
    cout << res;
    return 0;
}
