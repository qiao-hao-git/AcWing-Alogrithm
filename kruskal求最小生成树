#include<iostream>
#include<algorithm>

using namespace std;
const int N = 1e5 + 10;
int p[N];
int n, m, res = 0, cnt = 0;
struct edge {
    int x, y, w;
} e[2 * N];

bool cmp(const edge& a, const edge& b) {
    return a.w < b.w;
}

int find(int x) {
    if(p[x] != x) {
        p[x] = find(p[x]);
    }
    return p[x];
}

void kruskal(){
    for(int i = 0; i < m; i++) {
        int px = find(e[i].x);
        int py = find(e[i].y);
        if(px != py) {
            p[px] = py;
            cnt++;
            res += e[i].w;
        }
    }    
}

int main() {
    cin >> n >> m;
    for(int i = 1; i <= n; i++) {
        p[i] = i;
    }
    for(int i = 0; i < m; i++) {
        int x, y, z;
        cin >> x >> y >> z;
        e[i] = {x, y, z};
    }
    sort(e, e + m, cmp);
    kruskal();
    if(cnt < n - 1) {
        puts("impossible");
    } else {
        cout << res;
    }
    return 0;    
}
